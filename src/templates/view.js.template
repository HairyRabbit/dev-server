{% from "file-header.template" import header %}
{% from "newline.template" import newline %}

{#

 Template for view.js, include page and component

 #}


{{- header(name + " view", isFlow) -}}


{# import react and connect if redux required #}

import * as React from 'react'

{%- if isRedux %}

import { connect } from 'react-redux'
import * as actions from './action'

{%- endif %}

import style from './style.css'
{{- newline() -}}


{# Setup react component props and state type #}

{%- if isFlow %}

type Props = {}

{%- endif -%}

{%- if isState %}

type State = {}

{%- endif -%}


{# Render component body #}

{% set exportPrefix = "export" if isRedux else "export default" %}
{% set componentType = "React.Component" if not isPure else "React.PureComponent" %}
{% set functionParams = "(props: Props)" if isFlow else "(props)" %}
{% set functionReturnType = ": React.Node" if isFlow %}
{% set classTypeAnnotation %}
{% if isFlow %}
  {%- if not isState -%}
    <Props>
  {%- else -%}
    <Props, State>
  {%- endif -%}
{% endif %}
{% endset %}

{%- macro jsx(content = "") -%}
return (
  {{ content | safe }}
)
{%- endmacro -%}


{%- if not isClass -%}

{{ exportPrefix }} function {{ componentName }}{{ functionParams }}{{ functionReturnType }} {
  const { } = props

{{ jsx(layout) | indent(2, true) }}
}

{%- else -%}

{{ exportPrefix }} class {{ componentName }} extends {{ componentType }}{{ classTypeAnnotation | safe }} {
  render(){{ functionReturnType }} {
    const { } = this.props

{{ jsx(layout) | indent(4, true) }}
  }
}

{% endif -%}


{# Redux connect HOC and functions #}

{%- if isRedux -%}

function mapStateToProps(state) {
  return {

  }
}

function mapDispatchToProps(dispatch) {
  return {

  }
}

export default connect(mapStateToProps, mapDispatchToProps)({{ componentName }})

{% endif %}
